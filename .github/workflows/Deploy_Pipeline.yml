name: Deploy Pipeline
on:
  workflow_run:
    workflows: ["Build Pipeline"]
    types:
      - completed
      
jobs:
  deploy:
    name: Deploy
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        Deploy: [true]
    permissions:
      actions: read
      contents: read
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: 'Write Config & Key Files'
      run: |
       mkdir ~/.oci
       echo "[DEFAULT]" >> ~/.oci/config
        echo "user=${{secrets.OCI_USER_OCID}}" >> ~/.oci/config
        echo "fingerprint=${{secrets.OCI_FINGERPRINT}}" >> ~/.oci/config
        echo "region=${{secrets.OCI_REGION}}" >> ~/.oci/config
        echo "tenancy=${{secrets.OCI_TENANCY_OCID}}" >> ~/.oci/config
        echo "key_file=~/.oci/gallant.thomas@outlook.com_2022-10-25T03_23_41.205Z.pem" >> ~/.oci/config
        echo "${{secrets.OCI_KEY_FILE}}" >> ~/.oci/gallant.thomas@outlook.com_2022-10-25T03_23_41.205Z.pem
    
    - name: 'Install OCI CLI'
      run: |
        curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
        chmod +x install.sh
        ./install.sh --accept-all-defaults
        echo "::add-path::/home/runner/bin"
        exec -l $SHELL
      
    - name: 'Fix Config File Permissions'
      run: |
       oci setup repair-file-permissions --file /home/runner/.oci/config
       oci setup repair-file-permissions --file /home/runner/.oci/gallant.thomas@outlook.com_2022-10-25T03_23_41.205Z.pem
      
    - name: 'Check Existing Instance'
      run: |
        echo "::set-env name=INSTANCE_OCID::$( \
          oci compute instance list \
          --lifecycle-state RUNNING \
          --compartment-id ${{secrets.VM_COMPARTMENT_OCID}} \
          --display-name springboot \
          --query "data [0].id" \
          --raw-output \
        )"
      
    - name: 'Create Instance'
      if: ${{!env.INSTANCE_OCID}}
      run: |
        echo "::set-env name=INSTANCE_OCID::$( \
          oci compute instance launch \
            --compartment-id ${{secrets.VM_COMPARTMENT_OCID}} \
            --availability-domain ${{secrets.VM_AVAILABILITY_DOMAIN}} \
            --shape ${{secrets.VM_SHAPE}} \
            --assign-public-ip true \
            --display-name springboot \
            --ssh-authorized-keys-file /home/runner/.oci/Springboot.pub \
            --subnet-id ${{secrets.VM_SUBNET_OCID}} \
            --wait-for-state RUNNING \
            --query "data.id" \
            --raw-output \
        )"
        
    - name: 'Get Instance IP'
      run: |
        echo "::set-env name=INSTANCE_IP::$( \
          oci compute instance list-vnics \
          --instance-id ${{env.INSTANCE_OCID}} \
          --query 'data [0]."public-ip"' \
          --raw-output \
        )"
        
    - name: 'Wait for SSH'
      run: |
        while ! nc -w5 -z ${{ env.INSTANCE_IP }} 22; do
                sleep 5
                echo "SSH not available..."
        done; echo "SSH ready!"
        
    - name: 'Stop App'
      uses: appleboy/ssh-action@master
      with:
        host: ${{ env.INSTANCE_IP }}
        username: opc
        key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
        script: |
          pid=`ps aux | grep "[c]Springboot.jar" | awk '{print $2}'`
          if [ "$pid" == "" ]; then
            echo "Process not found"
          else
            kill -9 $pid
          fi
          sudo mkdir -p /app
          
      # This probably won't work because it won't retrieve the jar file correctly
#     - name: 'Push JAR'
#       uses: appleboy/scp-action@master
#       with:
#         host: ${{ env.INSTANCE_IP }}
#         username: opc
#         key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
#         source: "build/libs/cicd-demo-${{env.VERSION}}-all.jar"
#         target: "app"
#         strip_components: 2
        
#     - name: 'Start App'
#       uses: appleboy/ssh-action@master
#       with:
#         host: ${{ env.INSTANCE_IP }}
#         username: opc
#         key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
#         script: |
#           sudo mv ~/app/cicd-demo-${{env.VERSION}}-all.jar /app/cicd-demo.jar
#           nohup java -jar /app/cicd-demo.jar > output.$(date --iso).log 2>&1 &
      
#     - name: Start Mongo Docker
#       uses: isbang/compose-action@v1.3.2
#       with:
#         compose-file: "./src/main/resources/docker-compose.yml"
#         down-flags: "--volumes"
#         services: |
#           mongo
#     - name: Setup Java JDK
#       uses: actions/setup-java@v1
#       with:
#         java-version: 16
#     - name: Build with Maven
#       run: mvn test -P "Generate Client Code,Deploy Project"
